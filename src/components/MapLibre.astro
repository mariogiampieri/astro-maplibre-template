---
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import maplibregl from "maplibre-gl";
import type {
  FillLayerSpecification,
  CircleLayerSpecification,
  LineLayerSpecification,
  SymbolLayerSpecification,
  MapLayerMouseEvent,
} from "maplibre-gl";

export interface Props {
  latitude: number;
  longitude: number;
  zoom: number;
  mapstyle: string;
  container: string;

  /** If `false`, the map will not respond to interaction.  This is a static map built with the full web map rendering API. */
  interactive?: boolean;
  containerstyle?: string;
  pitch?: number;
  bearing?: number;
  layers?: GeoJSONFeatureLayer[];
}

export interface GeoJSONFeatureLayer {
  "data-type": "geojson";
  id: string;
  url: string;
  "layer-type":
    | "symbol"
    | "fill"
    | "custom"
    | "raster"
    | "line"
    | "circle"
    | "heatmap"
    | "fill-extrusion"
    | "hillshade"
    | "background";
  paint?:
    | FillLayerSpecification
    | LineLayerSpecification
    | CircleLayerSpecification
    | SymbolLayerSpecification;
  mouseEvent?: MapEvent[];
}

export interface MapEvent {
  type: "click" | "mousemove" | "mouseenter" | "mouseleave";
  content: Array<{
    [key: string]: string | ((e: maplibregl.MapLayerMouseEvent) => string);
  }>;
  callback?: (e: maplibregl.MapLayerMouseEvent) => void;
}

const {
  latitude,
  longitude,
  zoom,
  mapstyle,
  container,
  interactive,
  containerstyle = "height: 61.8vh",
  pitch,
  bearing,
  layers,
} = Astro.props;


const layersJson = JSON.stringify(layers);
---

<maplibre-map-inline
  data-latitude={latitude}
  data-longitude={longitude}
  data-zoom={zoom}
  data-mapstyle={mapstyle}
  data-container={container}
  data-interactive={interactive}
  data-containerstyle={containerstyle}
  data-pitch={pitch}
  data-bearing={bearing}
  data-layers={layersJson}
>
  <div id={container} style={containerstyle} class="maplibre-inline"></div>

  <link
    rel="stylesheet"
    href="https://unpkg.com/maplibre-gl/dist/maplibre-gl.css"
  />
  {
    /* Astro specific way to pull in MapLibre, `is:inline`:  https://docs.astro.build/en/reference/directives-reference/#isinline */
  }

  <script>
    import maplibregl from "maplibre-gl";
    import type { GeoJSONFeatureLayer } from "./MapLibre.astro";

    class MapLibreMap extends HTMLElement {
      constructor() {
        super();        
        // eslint-disable-next-line no-undef
        var map = new maplibregl.Map({
          container: this.dataset.container || "maplibre-map-inline",
          interactive: this.dataset.interactive
            ? JSON.parse(this.dataset.interactive)
            : false,
          center: [
            this.dataset.longitude ? parseFloat(this.dataset.longitude) : 0,
            this.dataset.latitude ? parseFloat(this.dataset.latitude) : 0,
          ],
          zoom: this.dataset.zoom ? parseFloat(this.dataset.zoom) : undefined,
          style: this.dataset.mapstyle,
        });

        map.on("load", () => {
          if (this.dataset.layers) {
            const layers = JSON.parse(this.dataset.layers);

            layers.forEach((layer: GeoJSONFeatureLayer) => {
              fetch(layer.url)
                .then((res) => res.json())
                .then((data) => {
                  // Modify the data to fit the expected format
                  data.features.forEach(
                    (feature: {
                      geometry: { type: string; coordinates: number[] };
                      properties: { longitude: number; latitude: number };
                    }) => {
                      // check if there's already a valid geometry, otherwise reconstruct it
                      if (!feature.geometry) {
                        feature.geometry = {
                          type: "Point",
                          coordinates: [
                            Number(feature.properties.longitude),
                            Number(feature.properties.latitude),
                          ],
                        };
                      }
                    }
                  );
                  // Add the source and layer to the map
                  map.addSource(layer.id, {
                    type: layer["data-type"],
                    data: data, // Use the resolved data here
                  });

                  map.addLayer({
                    id: layer.id,
                    type: layer["layer-type"],
                    // @ts-expect-error expect source to be string via source above
                    source: layer.id,
                    // @ts-expect-error expect partial paint defs
                    paint: layer.paint || {}, // Include paint if it exists
                  });
                });

              if (layer.mouseEvent) {
                const popup = new maplibregl.Popup({ offset: 15 });
                layer.mouseEvent.forEach((event) => {
                  map.on(event.type, layer.id, (e) => {
                    const popupContent = event.content
                      .map((tag) => {
                        const tagName = Object.keys(tag)[0];

                        // Generate the inner content by mapping over each item in the array
                        const value = Array.isArray(tag[tagName]) ? tag[tagName].map(
                            (item: {
                              [key: string]:
                                | string
                                | {
                                    property?: string;
                                    else?: string;
                                    str?: string;
                                    href?: string;
                                    text?: string;
                                    src?: string;
                                    alt?: string;
                                  };
                            }) => {
                              if ("property" in item) {
                                return e.features && e.features[0]
                                  ? e.features[0].properties[
                                      item.property as string
                                    ] || item.else
                                  : item.else;
                              } else if ("str" in item) {
                                return item.str;
                              } else if (
                                tagName === "a" &&
                                "href" in item &&
                                "text" in item
                              ) {
                                // Handle link tag with href and text
                                return `<a href="${item.href}" target="_blank">${item.text}</a>`;
                              } else if (tagName === "img" && "src" in item) {
                                // Handle image tag with src and optional alt
                                const altText = item.alt || "";
                                return `<img src="${item.src}" alt="${altText}" />`;
                              } else {
                                return ""; // Fallback for any unexpected structure
                              }
                            }
                          )
                          .join(" ") :  [tag[tagName]]; // Join all parts together to form the full tag content

                        return `<${tagName}>${value}</${tagName}>`;
                      })
                      .join(" "); // Join all tags to form the full popup content

                    popup.setLngLat(e.lngLat).setHTML(popupContent).addTo(map);

                    // Optional: call the callback if specified
                    if (event.callback) event.callback(e);

                      // if event is mouseover, add a mouseout event to remove the popup
                      if (event.type === "mousemove") {
                        map.on("mouseleave", layer.id, () => {
                          popup.remove();
                        });
                      }

                  });
                });
              }
            });
          }
        });
      }
    }

    window.customElements.define("maplibre-map-inline", MapLibreMap);
  </script></maplibre-map-inline
>
