---
import type { MapBlock } from "@types";

export interface Props {
    block: MapBlock;
  }
  const { block } = Astro.props;
// use props from block
  const {
  latitude,
  longitude,
  zoom,
  mapstyle,
  interactive,
  container, 
  layers,
  pitch,
  bearing,
  containerstyle,
} = block;

const layersJson = JSON.stringify(layers);

---

<maplibre-map-inline
    data-latitude={latitude}   
    data-longitude={longitude}
    data-zoom={zoom}
    data-mapstyle={mapstyle}
    data-container={container}
    data-layers={layersJson}
    data-pitch={pitch}
    data-bearing={bearing}
    data-interactive={interactive}
>
  <div id={container} class="map-container maplibre-inline" style={containerstyle}>
    {
        layersJson && JSON.parse(layersJson).some((layer: { toggle: boolean; }) => layer.toggle === true) ? 
        <nav id=`${container}-menu` class="menu"></nav> : 
        null
      }
  </div>
  <link
    rel="stylesheet"
    href="https://unpkg.com/maplibre-gl/dist/maplibre-gl.css"
  />
  <script>
    
import maplibregl from "maplibre-gl";
import { loadMapLayers } from "@lib/utils";
    class MapLibreMap extends HTMLElement {
        constructor() {
          super();
          const isStatic = this.dataset.interactive === undefined;
          var map = new maplibregl.Map({
            container: this.dataset.container || "maplibre-map",
            interactive: isStatic ? false : true,
            style: this.dataset.mapstyle || "mapbox://styles/mapbox/streets-v11",
            center: [parseFloat(this.dataset.longitude ?? "0"), parseFloat(this.dataset.latitude ?? "0")],
            zoom: parseFloat(this.dataset.zoom ?? "3") || 3,
            pitch: parseFloat(this.dataset.pitch ?? "0") || 0,
            bearing: parseFloat(this.dataset.bearing ?? "0") || 0,
          });
          
          map.on("load", () => {
            const layers = JSON.parse(this.dataset.layers || "[]");
            if (layers){
            loadMapLayers(map, layers);
            }
          });
        }
    }
    window.customElements.define("maplibre-map-inline", MapLibreMap);
  </script>
</maplibre-map-inline>